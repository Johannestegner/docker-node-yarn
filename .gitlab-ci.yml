include:
  - https://gitlab.com/jitesoft/gitlab-ci-lib/raw/master/Scan/trivy.yml

workflow:
  rules:
    - if: "$CI_COMMIT_BRANCH == 'master'"
      when: always
    - when: never

stages:
  - pre
  - download
  - containerize
  - scan

check:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    GIT_STRATEGY: none
  stage: pre
  parallel:
    matrix:
      - { VERSION: "14", TYPE: "fermium" }
      - { VERSION: "16", TYPE: "gallium" }
      - { VERSION: "18", TYPE: "latest" }
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: always
    - if: '$CI_PIPELINE_SOURCE == "web"'
      when: always
    - when: never
  script:
    - touch versions.txt
    - YARN_VERSION=$(wget -qO- https://api.github.com/repos/yarnpkg/yarn/releases | jq -r ".[0].tag_name")
    - |
      if [ "$(cat versions.txt)" != "${YARN_VERSION}" ]; then
        echo "New version. Building new image."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[NODE_MAJOR]=${NODE_MAJOR}" -F "variables[YARN_VERSION]=${YARN_VERSION}" -F "variables[TYPE]=${TYPE}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      else
        echo "Old image. Starting scan."
        curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[NODE_MAJOR]=${NODE_MAJOR}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline
      fi
  cache:
    policy: pull
    key: yarn-major-${NODE_MAJOR}
    paths:
      - versions.txt

# Trigger should always build, due to the fact that node image only triggers if there is a new node version!
trigger:
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  variables:
    GIT_STRATEGY: none
  stage: pre
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always
    - when: never
  script:
    - echo "Triggered from node. Running full build."
    - YARN_VERSION=$(wget -qO- https://api.github.com/repos/yarnpkg/yarn/releases | jq -r ".[0].tag_name")
    - curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[NODE_MAJOR]=${NODE_MAJOR}" -F "variables[YARN_VERSION]=${YARN_VERSION}" -F "variables[TYPE]=${TYPE}" -F "variables[BUILD]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline

download:
  image:  registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  stage: download
  rules:
    - if: "$BUILD"
      when: always
    - when: never
  variables:
    GIT_STRATEGY: none
  script:
    - wget -qO- https://dl.yarnpkg.com/debian/pubkey.gpg | gpg --import
    - wget -q https://yarnpkg.com/latest.tar.gz
    - wget -q https://yarnpkg.com/latest.tar.gz.asc
    - gpg --verify latest.tar.gz.asc
    - mkdir binaries
    - mv latest.tar.gz binaries/latest.tar.gz
  artifacts:
    expire_in: 1 day
    when: on_success
    paths:
      - binaries/

containerize:
  stage: containerize
  parallel:
    matrix:
      - { TYPE: "slim", NODE_IMAGE: "node-base" }
      - { TYPE: "full", NODE_IMAGE: "node-base/full" }
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  rules:
    - if: "$BUILD"
      when: on_success
    - when: never
  needs:
    - job: download
      artifacts: true
  script:
    - TAG_SUFFIX=""
    - if [ "${TYPE}" == "slim" ]; then TAG_SUFFIX="-slim"; fi
    - TAGS=$(helper "${CI_REGISTRY_IMAGE},jitesoft/node-yarn,ghcr.io/jitesoft/node-yarn" "${NODE_MAJOR}${TAG_SUFFIX},${TYPE}${TAG_SUFFIX}")
    - docker buildx build --platform linux/arm64,linux/amd64 --push ${TAGS} --progress plain --build-arg "YARN_VERSION=${YARN_VERSION}" --build-arg "NODE_IMAGE=${NODE_IMAGE}:${NODE_MAJOR}" .
  tags:
    - protected
    - buildx

create:cache:
  stage: .post
  image: registry.gitlab.com/jitesoft/dockerfiles/alpine:latest
  rules:
    - if: "$BUILD"
      when: on_success
  script:
    - echo "${YARN_VERSION}" > versions.txt
  cache:
    policy: push
    key: yarn-major-${NODE_MAJOR}
    paths:
      - versions.txt

notify:trivy:
  stage: .post
  image: registry.gitlab.com/jitesoft/dockerfiles/misc:latest
  rules:
    - if: "$BUILD"
      when: on_success
  script:
    - echo "Notifying scanner."
    - curl -F token=${CI_JOB_TOKEN} -F ref=master -F "variables[NODE_MAJOR]=${NODE_MAJOR}" -F "variables[SCAN]=true" https://gitlab.com/api/v4/projects/${CI_PROJECT_ID}/trigger/pipeline

scan:
  parallel:
    matrix:
      - { TYPE: "slim", ANNOYING_NILL_DATA: "aaa" }
      - { TYPE: "full", ANNOYING_NILL_DATA: "aaa" }
  stage: scan
  rules:
    - if: "$SCAN"
      when: always
    - when: never
  extends: .container_scanning
  before_script:
    - if [ "${TYPE}" == "slim" ]; then TAG_SUFFIX="-slim"; fi
    - export SCANNING_IMAGE_NAME="${CI_REGISTRY_IMAGE}:${FULL_VERSION:-$NODE_MAJOR}${TAG_SUFFIX}"
